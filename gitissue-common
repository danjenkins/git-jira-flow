#!/bin/sh

puts_step() {
    echo "-----> $@"
}

puts_warn() {
    echo " !     $@" >&2
}

fail() {
    puts_warn "$@"
    exit 1
}

# Executes a command using Jira's CLI. This will automatically read your server
# and authentication configuration from your .gitconfig:
#
#   [jira]
#     user = [username]
#     server = [server]
jira_cmd() {
    if [ -z "$JIRA_LOGIN_TOKEN" ]; then
        # This may not work if the result of jira_cmd is stored as a variable.
        # There must be a way around this.
        login_jira
    fi
    $JIRA_CLI --server "$JIRA_SERVER" --login "$JIRA_LOGIN_TOKEN" --password dummy "$@"
}

# Attempts to login to Jira and store the token for reuse.
login_jira() {
    if [ -z "$JIRA_SERVER" ]; then
        get_jira_config
    fi
    JIRA_LOGIN_TOKEN=$(get_cache login_token)

    if [ -z "$JIRA_LOGIN_TOKEN" ]; then        
        local stored_password=$(get_stored_password)
        if [ -n "$stored_password" ]; then
            password="$stored_password"
        else
            echo "Enter your Jira Password: \c"
            read -s password
            echo
        fi
        puts_step "Logging into Jira as '$JIRA_USER'"
        JIRA_LOGIN_TOKEN=$($JIRA_CLI --server $JIRA_SERVER --user $JIRA_USER --password $password -a login)
        set_cache login_token "$JIRA_LOGIN_TOKEN"
    else
        puts_step "Logging into Jira using token"
    fi
}

# Reads the Jira configuration from your .gitconfig file.
get_jira_config() {
    JIRA_SERVER=$(git config jira.server || true)
    JIRA_USER=$(git config jira.user || true)
    JIRA_CLI=$(git config jira.cli || true)
    JIRA_CLI=${JIRA_CLI:-"jira"}

    if [ -z "$JIRA_SERVER" ] || [ -z "$JIRA_USER" ]; then
        _show_jira_config_help
        exit 1
    fi
}

_show_jira_config_help() {
    echo "git-issue requires Jira API configuration to be set in your .gitconfig:"
    echo
    echo "  [jira]"
    echo "    server = <Jira server URL>"
    echo "    user = <your username>"
    echo
    echo "And optionally:"
    echo
    echo "  [jira]"
    echo "    cli = <path to Jira CLI>"
}

# Checks if the given string looks like a valid Jira issue key, failing fast
# if it does not.
check_jira_key() {
    [[ "$1" =~ ^[A-Z]+-[0-9]+$ ]] || fail "'$1' is not a vaild Jira issue key"
}

# Echos the summary for the given Jira issue key. This will fail if the
# issue does not exist.
get_jira_summary() {
    local jira_key="$1"
    local jira_summary=$(jira_cmd -a getFieldValue --field Summary --issue $jira_key 2>/dev/null | sed -e '1d')
    test -n "$jira_summary" || fail "Issue '$jira_key' does not exist"
    echo "$jira_summary"
}

git_local_branches() {
    git branch --no-color | sed 's/^[* ] //'
}

git_current_branch() {
    git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

git_issue_branch() {
    echo "$(git_local_branches)" | grep "$1/"
}

# Attempts to get cached data from the GITISSUE_CACHE_DIR.
#
# Usage:
#   data=$(get_cache some_key)
get_cache() {
    local key="$1"
    local file="$GITISSUE_CACHE_DIR/$key"
    if [ $(find $file -mmin -$GITISSUE_CACHE_EXPIRATION) ]; then
        cat "$file"
    fi
}

# Stores the given data to a file in the GITISSUE_CACHE_DIR
#
# Usage:
#   set_cache some_key "$some_data"
set_cache() {
    local key="$1"
    local value="$2"
    mkdir -p "$GITISSUE_CACHE_DIR"
    echo "$2" > "$GITISSUE_CACHE_DIR/$key"
}

# Checks the .netrc file for stored password
# 
# Usage:
#   PASSWORD=$(get_stored_password)
get_stored_password() {
    if [ -z "$JIRA_SERVER" ] || [ -z "$JIRA_USER" ]; then
        get_jira_config
    fi
    
    local netrc_path="$HOME/.netrc"
    local machine=$(_parse_machine_name "$JIRA_SERVER")
    local section=$(cat "$netrc_path" | grep -A 2 "$machine")

    if [ -n "$section" ]; then
        local login=$(_parse_setting_from_section "$section" login)
        if [[ "$login" == "$JIRA_USER" ]]; then
            _parse_setting_from_section "$section" password
        fi
    fi
}

_parse_setting_from_section() {
    local section="$1"
    local setting="$2"
    echo "$section" | awk "{if (\$1==\"$setting\") print \$2}"
}

_parse_machine_name() {
    local url="$1"
    echo "$url" | sed -e "s!\http\(s\)\{0,1\}://*!!g"
}
