#!/bin/sh

function usage() {
    cat <<USAGE
usage: git issue start <ISSUE_KEY> [-b <BRANCH_NAME>]

<ISSUE_KEY> should be the Jira key for the issue you'd like to work on:

   git issue start WEB-12 -b cleanup

Optionally, you can name the branch inline:

   git issue start WEB-12/cleanup
USAGE
}

function cmd_start() {
    if [ "$#" -lt 1 ]; then
        usage; exit 1
    fi
    local issue=(${1//\// }); shift
    parse_opts "$@"

    login_jira
    local issue_key=${issue[0]}
    local issue_name=${issue[1]}
    local issue_summary
    local issue_branch
    local start_branch
    local remote
    check_jira_key "$issue_key"

    puts_step "Starting issue: $issue_key"
    issue_summary=$(get_jira_summary "$issue_key")
    if [[ -z "$issue_name" ]]; then
        issue_name="$BRANCH_NAME"
    fi
    if [[ -z "$issue_name" ]]; then
        issue_name=${issue_summary// /_}
    fi
    issue_branch="$issue_key/$issue_name"

    if [[ -n "$HOTFIX" ]]; then
        issue_branch="!$issue_branch"
        start_branch="$JIRA_MASTER_BRANCH"
        remote="$JIRA_MASTER_REMOTE"
    else
        start_branch="$JIRA_DEVELOPMENT_BRANCH"
        remote="$JIRA_DEVELOPMENT_REMOTE"
    fi

    puts_step "Creating branch: $issue_branch from '$start_branch'"
    git checkout "$start_branch"
    git pull "$remote" "$start_branch" 2>/dev/null
    git checkout -b "$issue_branch" "$start_branch"

    puts_step "Updating issue: $issue_key"
    jira_cmd -a progressIssue --issue "$issue_key" --step "In Progress"
    jira_cmd -a updateIssue --issue "$issue_key" --assignee "$JIRA_USER" >/dev/null
}

function cmd_help() {
    usage
    exit 0
}

function parse_opts() {
    while getopts ":fb:" option
    do
        case "$option" in
            b)
                BRANCH_NAME="$OPTARG";;
            f)
                HOTFIX=true;;
            \?)
                usage; exit 1;;
        esac
    done
}
